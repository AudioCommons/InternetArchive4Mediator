PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX iarchive-api: <https://archive.org/advancedsearch.php>
PREFIX schema: <http://schema.org/>
PREFIX ac: <https://w3id.org/ac-ontology/aco#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX cc: <http://creativecommons.org/ns#>

PREFIX test: <http://mytest.org#>

GENERATE {
    GENERATE {
        #test:mytest test:results ?resultSet.
    
        <https://archive.org/>
            rdf:type foaf:Organization ;
            foaf:name "Internet Archive" .
            
        # Generate search action description
        ?searchAction
            a schema:SearchAction ;
            schema:object <https://archive.org/> ;
            schema:query ?ia_url; #<https://archive.org/advancedsearch.php?q=title%3A(cat)+AND+mediatype%3A(audio)&fl[]=title&fl[]=description&fl[]=licenseurl&sort[]=&sort[]=&sort[]=&rows=50&page=1&output=json> ;
            schema:startTime $startTime ;
            schema:endTime ?endTime ;
            schema:actionStatus ?actionStatus ;
            schema:result ?audioCollection ;
            schema:error ?error .
                
        ?audioCollection
            rdf:type ac:AudioCollection .
        
        GENERATE {
            ?audioCollection ac:memberNode ?audioCollectionNode .
            ?audioCollectionNode
                a ac:AudioCollectionNode ;
                ac:nodeIndex ?index ;
                ac:nodeContent ?audioClip .
                ?audioClip
                    a ac:AudioClip;
                    dc:title ?title ;
                    dc:description ?description;
                    ac:author ?creator;
                    cc:license ?license;
                    ac:originalFile _:originalAudioFile.
                _:originalAudioFile a ac:AudioFile.
        }
        ITERATOR iter:JSONElement(?resultSet, "$.[*]") AS ?results
        WHERE {
            BIND(BNODE() AS ?audioCollectionNode)
            BIND(fn:JSONPath(?results, "element") AS ?res)
            BIND(fn:JSONPath(?results, "position") AS ?indexFromZero)
            BIND(?indexFromZero + 1 AS ?index)
            
            BIND(STR(fn:JSONPath(?res,"$.title")) AS ?title)
            BIND(STR(fn:JSONPath(?res,"$.description")) AS ?description)
            BIND(IRI(fn:JSONPath(?res,"$.licenseurl")) AS ?license)
            BIND(STR(fn:JSONPath(?res,"$.creator")) AS ?creator)
            BIND(BNODE() as ?audioClip)
        }.
    }
    SOURCE ?ia_url AS ?source
    WHERE {
        BIND(fn:JSONPath(?source, "$.response.docs") AS ?resultSet)
        BIND(BNODE() AS ?searchAction)
        BIND(NOW() as $startTime)
        BIND(NOW() as ?endTime)
        BIND(IF(BOUND(?resultSet), schema:CompletedActionStatus, schema:FailedActionStatus) AS ?actionStatus)
        OPTIONAL {
            BIND(BNODE() AS ?audioCollection).
          FILTER(BOUND(?resultSet))
        }
        OPTIONAL {
            BIND(BNODE() AS ?error)
          FILTER(!BOUND(?resultSet))
        }
    }.
}
WHERE {
    BIND(IRI(CONCAT(
        STR(iarchive-api:),
        "?q=",
        ENCODE_FOR_URI("title:(cat) AND mediatype:(audio)"), # ($pattern)
        "&fl[]=title",
        "&fl[]=description",
        "&fl[]=licenseurl",
        "&fl[]=creator",
        "&sort[]=&sort[]=&sort[]=",#&rows=50&page=1",
        "&output=json"
    )) AS ?ia_url)
}
#<https://archive.org/advancedsearch.php?q=title%3A(cat)+AND+mediatype%3A(audio)&fl[]=title&fl[]=description&fl[]=licenseurl&fl[]=creator&sort[]=&sort[]=&sort[]=&rows=50&page=1&output=json>
